import random
"""
if you're looking at a spot x and the spots around it, the directions are

123
8x4
765
"""

SIZE = 10
"""grid will be 10x10"""

def makeGrid(name):
    """makes the grid to be what size you need and fills it with dashes"""
    for i in range(SIZE):
        interior = []
        for j in range(SIZE):
            interior.append("-")
        name.append(interior)
    return name
def returnGrid(grid):
    """if you ever need to use the grid it can be returned as a string"""
    result = ""
    for row in range (len(grid)):
        result += str(grid[row])
    return result
def printGrid(grid):
    """prints the grid as a matrix"""
    for row in range(len(grid)):
        print str(grid[row])

grid = []
"""the grid will store data that isn't seen such as mine location"""
game = []
"""game will store data about what the player sees such as spots they've already checked"""
grid = makeGrid(grid)
game = makeGrid(game)

for mine in range(SIZE):
    """puts the mines in random places on the grid and marks them with an X"""
    x_var = random.randint(0, SIZE - 1)
    y_var = random.randint(0, SIZE - 1)
    grid[x_var][y_var] = "X"

def whichDirections(r, c):
    """based on where in the grid the spot is, this will return a list of which directions to check
    for example if you're in the top left corner, you can't check something in the 1 direction because
    that would be row -1"""
    results = []
    if r == 0:
        if c == 0:
            results = [4, 5, 6]
        elif c == SIZE - 1:
            results = [6, 7, 8]
        else:
            results = [4, 5, 6, 7, 8]
    elif r == SIZE - 1:
        if c == 0:
            results = [2, 3, 4]
        elif c == SIZE - 1:
            results = [1, 2, 8]
        else:
            results = [1, 2, 3, 4, 8]
    else:
        if c == 0:
            results = [2, 3, 4, 5, 6]
        elif c == SIZE - 1:
            results = [1, 2, 6, 7, 8]
        else:
            results = [1, 2, 3, 4, 5, 6, 7, 8]
    return results

def checkMines(direction_list, r, c):
    """takes in a list of which directions are valid for the spot [r][c]
    calculates how many mines surround the spot and returns it"""
    total = 0
    for num in direction_list:
        if (num == 1 and grid[r-1][c-1] == "X"):
            total += 1
        elif (num == 2 and grid[r-1][c] == "X"):
            total += 1
        elif (num == 3 and grid[r-1][c+1] == "X"):
            total += 1
        elif (num == 4 and grid[r][c+1] == "X"):
            total += 1
        elif (num == 5 and grid[r+1][c+1] == "X"):
            total += 1
        elif (num == 6 and grid[r+1][c] == "X"):
            total += 1
        elif (num == 7 and grid[r+1][c-1] == "X"):
            total += 1
        elif (num == 8 and grid[r][c-1] == "X"):
            total +=1
    return total

for r in range(len(grid)):
    for c in range(len(grid)):
        """takes every spot on the grid, if it's not a mine, and changes it's
        character representation from a dash to the number of mines that surround it"""
        if grid[r][c] != "X":
            directions = whichDirections(r, c)
            grid[r][c] = str(checkMines(directions, r, c))


printGrid(game)
win = False
lose = False
spotsOpen = SIZE*SIZE
"""if you're starting with a 10x10 grid, there are 100 spots of which 10 are mines
after every new spot is opened by the player, the spot count decreases
once there are only 10 spots left, the player has found all the mines and wins"""
while(win == False and lose == False):
    y_var = int(raw_input("Which column 1-10 ")) - 1
    x_var = int(raw_input("Which row 1-10 ")) - 1
    """although the lists are in the order 0-9, for convenience the player will input 1-10 and we will subtract 1"""
    if(game[x_var][y_var] == "-"):
        spotsOpen -= 1
        """if the spot the player enters has not already been revealed, the spot count decreases"""
    game[x_var][y_var] = grid[x_var][y_var]
    if grid[x_var][y_var] == "0":
        """if the spot chosen has 0 mines around it, then all the spots around it will be revealed"""
        placeZero = whichDirections(x_var, y_var)
        for num in placeZero:
            r = x_var
            c = y_var
            """some of the spots around the 0 might have already been revealed, so they do not need to be re-revealed
            and the spot count should not decrease if they have already been revealed"""
            if (num == 1 and game[r-1][c-1] == "-"):
                game[r-1][c-1] = grid[r-1][c-1]
                spotsOpen -= 1
            elif (num == 2 and game[r-1][c] == "-"):
                game[r-1][c] = grid[r-1][c]
                spotsOpen -= 1
            elif (num == 3 and game[r-1][c+1] == "-"):
                game[r-1][c+1] = grid[r-1][c+1]
                spotsOpen -= 1
            elif (num == 4 and game[r][c+1] == "-"):
                game[r][c+1] = grid[r][c+1]
                spotsOpen -= 1
            elif (num == 5 and game[r+1][c+1] == "-"):
                game[r+1][c+1] = grid [r+1][c+1]
                spotsOpen -= 1
            elif (num == 6 and game[r+1][c] == "-"):
                game[r+1][c] = grid[r+1][c]
                spotsOpen -= 1
            elif (num == 7 and game[r+1][c-1] == "-"):
                game[r+1][c-1] = grid[r+1][c-1]
                spotsOpen -= 1
            elif (num == 8 and game[r][c-1] == "-"):
                game[r][c-1] = grid[r][c-1]
                spotsOpen -= 1
        printGrid(game)
    elif grid[x_var][y_var] == "X":
        """if the spot chosen is a mine, the player loses"""
        printGrid(game)
        print
        print "Game over"
        lose = True
    else:
        printGrid(game)
    if spotsOpen == SIZE:
        """if the only spots left are the mines, the player wins"""
        print
        print "You win!"
        win = True
    else:
        print "Spots open = " + str(spotsOpen)
        print
print "The grid was: "
printGrid(grid)
